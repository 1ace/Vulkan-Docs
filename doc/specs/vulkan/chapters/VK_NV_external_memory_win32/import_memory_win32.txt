To import memory created on the same physical device but outside of
the current Vulkan instance, set the pname:pNext pointer of
VkMemoryAllocateInfo to refer to a
slink:VkImportMemoryWin32HandleInfoNV structure.

include::../../api/structs/VkImportMemoryWin32HandleInfoNV.txt[]

The fields of slink:VkImportMemoryWin32HandleInfoNV are defined as follows:

    * pname:handleType: One of
    ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV,
    ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV,
    ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV,
    ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV,
    or 0.
    
    * pname:handle: If pname:handleType is
    ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV or
    ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV
    this must: be a valid handle returned by
    flink:vkGetMemoryWin32HandleNV or, in the case of
    ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV,
    a handle duplicated from such a handle using
    fname:DuplicateHandle().  If pname:handleType is
    ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV, this
    must: be a valid NT handle returned by
    fname:IDXGIResource1::CreateSharedHandle() or a handle duplicated
    from such a handle using fname:DuplicateHandle().  If
    pname:handleType is
    ename:VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV,
    this must: be a valid handle returned by
    fname:IDXGIResource::GetSharedHandle().

include::../../validity/structs/VkImportMemoryWin32HandleInfoNV.txt[]
